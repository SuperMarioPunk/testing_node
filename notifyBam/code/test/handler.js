'use strict';

// tests for notify_bam
// Generated by serverless-mocha-plugin

const mochaPlugin = require('serverless-mocha-plugin');
const expect = mochaPlugin.chai.expect;
let wrapped = mochaPlugin.getWrapper('notify_bam', '/handler.js', 'notifyBam');
var AWS = require('aws-sdk-mock');

var validData = {};
describe('Notify BAM', () => {

    describe('Request', () => {
        before((done) => {
            AWS.mock('Lambda', 'invoke', (params, callback) => callback(null, 'ok'));
            validData = {
                "rqUID": "1234455",
                "dueDate": "2014-07-24T20:08:50+00:00",
                "msgRqHdr": {
                    "credentialsRsHdr": {
                        "seqNum": "1003"
                    },
                    "contextRqHdr": {
                        "pointOfServiceData": {
                            "posAgent": {
                                "agentIdent": "A2000"
                            },
                            "posLocation": "1361"
                        }
                    }
                },
                "alertInfo": {
                    "fromAcctRef": {
                        "acctRec": {
                            "acctId": "00000000000000208005126",
                            "acctInfo": {
                                "acctBal": 982793
                            }
                        }
                    },
                    "trnType": {
                        "trnTypeValue": 515459
                    },
                    "toAcctRef": {
                        "acctRec": {
                            "acctId": "00000000000000208005126"
                        }
                    },
                    "curAmt": {
                        "amt": 142507,
                        "curCode": "N$"
                    },
                    "memo": "HSBC*HSBC - C 6037429300000218 20140724"
                }
            };

            done();
        });
        after((done) => {
            AWS.restore('Lambda', 'invoke');
            done();
        });
        it('peticion con campos requeridos faltantes', () => {
            var vData = copy(validData);
            delete vData.alertInfo.fromAcctRef.acctRec.acctId;
            return wrapped.run(vData).then((response) => {
                expect(response.message).to.equal("should have required property 'acctId'");
            });
        });
        it('peticion con campos minimos requeridos', () => {
            return wrapped.run(validData).then((response) => {
                expect(response).to.not.be.empty;
                expect(response.status.statusCode).to.be.equal(200);

            });
        });
        it('peticion con campos minimos requeridos en body', () => {
            return wrapped.run({ body: validData }).then((response) => {
                expect(response).to.not.be.empty;
                expect(response.status.statusCode).to.be.equal(200);
            });
        });
    });

    describe('Validations', () => {
        var MQCON = '';
        before((done) => {
            MQCON = process.env.MQCON;
            done();
        });
        after((done) => {
            process.env.MQCON = MQCON;
            done();
        });

        it('sin variables de entorno', (done) => {
            process.env.MQCON = '';
            wrapped.run(validData).then((response) => {
                expect(response.status.statusCode).to.be.equal(400);
                expect(response.message).to.be.equal('MQCON is required.');
                done();
            });
        });

    });


});

function copy(data) {
    return JSON.parse(JSON.stringify(data));
}